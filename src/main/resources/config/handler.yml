# Handler middleware chain configuration
#----------------------------------------
enabled: true

# Configuration for the LightHttpHandler. The handler is the base class  for all middleware, server and health handlers
# set the Status Object in the AUDIT_INFO, for auditing purposes
# default, if not set:false
auditOnError: ${handler.auditOnError:false}

# set the StackTrace in the AUDIT_INFO, for auditing purposes
# default, if not set:false
auditStackTrace: ${handler.auditStackTrace:false}

# Base Path of the API endpoints
basePath: ${handler.basePath:/}

#------------------------------------------------------------------------------
# Support individual handler chains for each separate endpoint. It allows framework
# handlers like health check, server info to bypass majority of the middleware handlers
# and allows mixing multiple frameworks like OpenAPI and GraphQL in the same instance.
#
# handlers  --  list of handlers to be used across chains in this microservice
#               including the routing handlers for ALL endpoints
#           --  format: fully qualified handler class name@optional:given name
# chains    --  allows forming of [1..N] chains, which could be wholly or
#               used to form handler chains for each endpoint
#               ex.: default chain below, reused partially across multiple endpoints
# paths     --  list all the paths to be used for routing within the microservice
#           ----  path: the URI for the endpoint (ex.: path: '/v1/pets')
#           ----  method: the operation in use (ex.: 'post')
#           ----  exec: handlers to be executed -- this element forms the list and
#                       the order of execution for the handlers
#
# IMPORTANT NOTES:
# - to avoid executing a handler, it has to be removed/commented out in the chain
#   or change the enabled:boolean to false for a middleware handler configuration.
# - all handlers, routing handler included, are to be listed in the execution chain
# - for consistency, give a name to each handler; it is easier to refer to a name
#   vs a fully qualified class name and is more elegant
# - you can list in chains the fully qualified handler class names, and avoid using the
#   handlers element altogether
#------------------------------------------------------------------------------
handlers:
  # Light-framework cross-cutting concerns implemented in the microservice
  - com.networknt.exception.ExceptionHandler@exception
  - com.networknt.metrics.MetricsHandler@metrics
  - com.networknt.traceability.TraceabilityHandler@traceability
  - com.networknt.correlation.CorrelationHandler@correlation
  - com.networknt.openapi.OpenApiHandler@specification
  - com.networknt.openapi.JwtVerifyHandler@security
  - com.networknt.body.BodyHandler@body
  - com.networknt.audit.AuditHandler@audit
  - com.networknt.sanitizer.SanitizerHandler@sanitizer
  - com.networknt.openapi.ValidatorHandler@validator
  # Customer business domain specific cross-cutting concerns handlers
  # Framework endpoint handlers
  - com.networknt.mesh.kafka.handler.SidecarHealthHandler@health
  - com.networknt.info.ServerInfoGetHandler@info
  - com.networknt.logging.handler.LoggerGetHandler@getLogger
  - com.networknt.logging.handler.LoggerPostHandler@postLogger
  - com.networknt.logging.handler.LoggerGetLogContentsHandler@getLogContents
  - com.networknt.specification.SpecDisplayHandler@spec
  - com.networknt.specification.SpecSwaggerUIHandler@swaggerui
  - com.networknt.specification.FaviconHandler@favicon
  - com.networknt.config.reload.handler.ModuleRegistryGetHandler@modules
  - com.networknt.config.reload.handler.ConfigReloadHandler@configReload
  - com.networknt.server.handler.ServerShutdownHandler@shutdown
  # Chaos monkey handlers
  - com.networknt.chaos.KillappAssaultHandler@killapp
  - com.networknt.chaos.LatencyAssaultHandler@latency
  - com.networknt.chaos.MemoryAssaultHandler@memory
  - com.networknt.chaos.ExceptionAssaultHandler@exchaos
  - com.networknt.chaos.ChaosMonkeyGetHandler@chaosget
  - com.networknt.chaos.ChaosMonkeyPostHandler@chaospost

  # - com.networknt.metrics.prometheus.PrometheusGetHandler@getprometheus
  # Business Handlers
  - com.networknt.mesh.kafka.handler.ProducersTopicPostHandler
  - com.networknt.mesh.kafka.handler.ConsumersGroupPostHandler
  - com.networknt.mesh.kafka.handler.ConsumersGroupInstancesInstanceDeleteHandler
  - com.networknt.mesh.kafka.handler.ConsumersGroupInstancesInstanceOffsetsPostHandler
  - com.networknt.mesh.kafka.handler.ConsumersGroupInstancesInstanceOffsetsPutHandler
  - com.networknt.mesh.kafka.handler.ConsumersGroupInstancesInstanceSubscriptionsPostHandler
  - com.networknt.mesh.kafka.handler.ConsumersGroupInstancesInstanceSubscriptionsGetHandler
  - com.networknt.mesh.kafka.handler.ConsumersGroupInstancesInstanceSubscriptionsDeleteHandler
  - com.networknt.mesh.kafka.handler.ConsumersGroupInstancesInstanceAssignmentsPostHandler
  - com.networknt.mesh.kafka.handler.ConsumersGroupInstancesInstanceAssignmentsGetHandler
  - com.networknt.mesh.kafka.handler.ConsumersGroupInstancesInstancePositionsPostHandler
  - com.networknt.mesh.kafka.handler.ConsumersGroupInstancesInstancePositionsFirstPostHandler
  - com.networknt.mesh.kafka.handler.ConsumersGroupInstancesInstancePositionsLastPostHandler
  - com.networknt.mesh.kafka.handler.ConsumersGroupInstancesInstanceRecordsGetHandler
  - com.networknt.mesh.kafka.handler.DeadlettersQueueReactiveGetHandler
  - com.networknt.mesh.kafka.handler.DeadlettersQueueActiveGetHandler
  - com.networknt.mesh.kafka.handler.KsqldbActivePostHandler
  - com.networknt.mesh.kafka.handler.DeadlettersQueueActivePostHandler
  - com.networknt.mesh.kafka.handler.ConsumersActiveAuditPostHandler

additionalHandlers: ${handler.additionalHandlers:}

chains:
  default:
    - exception
    - metrics
    - traceability
    - correlation
    - specification
    - security
    - body
    - audit
    - sanitizer
    - validator

  admin:
    - exception
    - correlation
    - specification
    - security
    - body
    - validator

additionalChains: ${handler.additionalChains:}

paths:
  - path: '/producers/{topic}'
    method: 'POST'
    exec:
      - default
      - com.networknt.mesh.kafka.handler.ProducersTopicPostHandler
  - path: '/consumers/{group}'
    method: 'POST'
    exec:
      - default
      - com.networknt.mesh.kafka.handler.ConsumersGroupPostHandler
  - path: '/consumers/{group}/instances/{instance}'
    method: 'DELETE'
    exec:
      - default
      - com.networknt.mesh.kafka.handler.ConsumersGroupInstancesInstanceDeleteHandler
  - path: '/consumers/{group}/instances/{instance}/offsets'
    method: 'POST'
    exec:
      - default
      - com.networknt.mesh.kafka.handler.ConsumersGroupInstancesInstanceOffsetsPostHandler
  - path: '/consumers/{group}/instances/{instance}/offsets'
    method: 'PUT'
    exec:
      - default
      - com.networknt.mesh.kafka.handler.ConsumersGroupInstancesInstanceOffsetsPutHandler
  - path: '/consumers/{group}/instances/{instance}/subscriptions'
    method: 'POST'
    exec:
      - default
      - com.networknt.mesh.kafka.handler.ConsumersGroupInstancesInstanceSubscriptionsPostHandler
  - path: '/consumers/{group}/instances/{instance}/subscriptions'
    method: 'GET'
    exec:
      - default
      - com.networknt.mesh.kafka.handler.ConsumersGroupInstancesInstanceSubscriptionsGetHandler
  - path: '/consumers/{group}/instances/{instance}/subscriptions'
    method: 'DELETE'
    exec:
      - default
      - com.networknt.mesh.kafka.handler.ConsumersGroupInstancesInstanceSubscriptionsDeleteHandler
  - path: '/consumers/{group}/instances/{instance}/assignments'
    method: 'POST'
    exec:
      - default
      - com.networknt.mesh.kafka.handler.ConsumersGroupInstancesInstanceAssignmentsPostHandler
  - path: '/consumers/{group}/instances/{instance}/assignments'
    method: 'GET'
    exec:
      - default
      - com.networknt.mesh.kafka.handler.ConsumersGroupInstancesInstanceAssignmentsGetHandler
  - path: '/consumers/{group}/instances/{instance}/positions'
    method: 'POST'
    exec:
      - default
      - com.networknt.mesh.kafka.handler.ConsumersGroupInstancesInstancePositionsPostHandler
  - path: '/consumers/{group}/instances/{instance}/positions/first'
    method: 'POST'
    exec:
      - default
      - com.networknt.mesh.kafka.handler.ConsumersGroupInstancesInstancePositionsFirstPostHandler
  - path: '/consumers/{group}/instances/{instance}/positions/last'
    method: 'POST'
    exec:
      - default
      - com.networknt.mesh.kafka.handler.ConsumersGroupInstancesInstancePositionsLastPostHandler
  - path: '/consumers/{group}/instances/{instance}/records'
    method: 'GET'
    exec:
      - default
      - com.networknt.mesh.kafka.handler.ConsumersGroupInstancesInstanceRecordsGetHandler
  - path: '/consumers/deadLetter/reactive'
    method: 'GET'
    exec:
      - default
      - com.networknt.mesh.kafka.handler.DeadlettersQueueReactiveGetHandler
  - path: '/consumers/deadLetter/active'
    method: 'GET'
    exec:
      - default
      - com.networknt.mesh.kafka.handler.DeadlettersQueueActiveGetHandler
  - path: '/ksqldb/active'
    method: 'POST'
    exec:
      - default
      - com.networknt.mesh.kafka.handler.KsqldbActivePostHandler
  - path: '/consumers/deadLetter/active'
    method: 'POST'
    exec:
      - default
      - com.networknt.mesh.kafka.handler.DeadlettersQueueActivePostHandler
  - path: '/consumers/active/audit'
    method: 'POST'
    exec:
      - default
      - com.networknt.mesh.kafka.handler.ConsumersActiveAuditPostHandler

  # control plane health check with security
  - path: '/health/${server.serviceId:com.networknt.kafka-sidecar-1.0.0}'
    method: 'GET'
    exec:
      - security
      - health

  # k8s liveness probe without security
  - path: '/health/liveness'
    method: 'GET'
    exec:
      - health
  # k8s readiness probe without security
  - path: '/health/readiness'
    method: 'GET'
    exec:
      - health
  # the health check endpoint called from control plane with security and it will invoke backend optionally.
  - path: '/adm/health/${server.serviceId}'
    method: 'get'
    exec:
      - admin
      - health
  - path: '/adm/server/info'
    method: 'get'
    exec:
      - admin
      - info
  - path: '/adm/logger'
    method: 'get'
    exec:
      - admin
      - getLogger
  - path: '/adm/logger'
    method: 'post'
    exec:
      - admin
      - postLogger
  - path: '/adm/logger/content'
    method: 'GET'
    exec:
      - admin
      - getLogContents
  - path: '/adm/modules'
    method: 'get'
    exec:
      - modules
  - path: '/adm/modules'
    method: 'post'
    exec:
      - admin
      - configReload
  - path: '/adm/shutdown'
    method: 'delete'
    exec:
      - admin
      - shutdown
  - path: '/adm/chaosmonkey'
    method: 'get'
    exec:
      # enable security once we have this endpoint in the spec with a proper scope.
      - admin
      - chaosget
  - path: '/adm/chaosmonkey/{assault}'
    method: 'post'
    exec:
      # enable security once we have this endpoint in the spec with a proper scope.
      - admin
      - chaospost
  - path: '/spec.yaml'
    method: 'get'
    exec:
      - spec
  - path: '/specui.html'
    method: 'get'
    exec:
      - swaggerui
  - path: '/favicon.ico'
    method: 'get'
    exec:
      - favicon

additionalPaths: ${handler.additionalPaths:}
